name: CI Check Frontend Pull Request

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'apps/frontend/**'
      - 'libs/**'
      - '.github/**'

jobs:
  branch-naming-check:
    name: Branch Naming Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Branch Name
        run: |
          if [[ "$GITHUB_REF" == refs/pull/* ]]; then
            echo "BRANCH_NAME=${GITHUB_HEAD_REF}" >> $GITHUB_ENV
          else
            echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          fi

      - name: Validate Branch Name
        run: |
          if [[ ! "$BRANCH_NAME" =~ ^feature/DEVOPS-[0-9]+(-DEVOPS-[0-9]+)*_-_[a-zA-Z0-9_-]+$ ]]; then
            echo "‚ùå Invalid branch name: '$BRANCH_NAME'. Must follow 'feature/DEVOPS-<ticket-number>_-_<message>' or 'feature/DEVOPS-<ticket-number>-DEVOPS-<ticket-number>_-_<message>' format."
            exit 1
          fi
          echo "‚úÖ Branch name '$BRANCH_NAME' is valid."

  code-message-check:
    name: Commit Message Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch all branches
        run: git fetch --all

      - name: Get Commit Summary
        run: echo "COMMIT_SUMMARY=$(git log origin/${GITHUB_HEAD_REF} -1 --pretty=%s)" >> $GITHUB_ENV

      - name: Validate Commit Summary
        run: |
          if [[ ! "$COMMIT_SUMMARY" =~ ^DEVOPS-[0-9]+:\ .+$ ]]; then
            echo "‚ùå Invalid commit message summary: '$COMMIT_SUMMARY'. Must follow 'DEVOPS-<ticket-number>: <message>' format."
            exit 1
          fi
          echo "‚úÖ Commit message format is valid."

  prettier:
    name: Prettier
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js (Stable LTS)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Clean npm cache & dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm cache clean --force

      - name: Install Dependencies (Fix Peer Dependency Issues)
        run: npm install --save-dev prettier --legacy-peer-deps

      - name: Run Prettier Check
        run: |
          if ! npx prettier --check .; then
            echo "‚ùå Code style issues found. Please run 'npx prettier --write .' locally to fix them."
            exit 1
          fi
        # continue-on-error: true

  build-unit-test:
    name: Build artifacts & Unit test
    runs-on: ubuntu-latest
    needs: [branch-naming-check, code-message-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.6.0'

      - name: Install Dependencies
        run: |
          npm install -g pnpm yarn
          pnpm install

      - name: Check build artifacts front end
        run: |
          if git diff --name-only origin/${{ github.base_ref }} | grep -q '^apps/frontend/'; then
            echo "üîç Changes detected in 'apps/frontend/'. Running build..."
            cd apps/frontend    
            npx nx build frontend
          else
            echo "‚úÖ No changes in 'apps/frontend/'. Skipping build."
          fi

      - name: UnitTest
        run: echo "TODO"

  sca-snyk:
    name: SCA | Snyk
    runs-on: ubuntu-latest
    needs: [build-unit-test]
    steps:
      - name: SCA | Snyk
        run: echo "TODO"

  sca-dependency-check:
    name: SCA | OWASP Dependency-Check
    runs-on: ubuntu-latest
    needs: [build-unit-test]
    steps:
      # - name: Cache Dependency Check Data
      #   id: cache-dependency-check
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.dependency-check
      #     key: ${{ runner.os }}-dependency-check-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-dependency-check-
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.6.0'

      # - name: Install SonarQube Scanner
      #   run: |
      #     export PATH=$PATH:/usr/sonar-scanner/bin
      #     echo "/usr/sonar-scanner/bin" >> $GITHUB_PATH
      #     echo "SonarQube Scanner installed at: $(which sonar-scanner)"
      #     sonar-scanner --version

      # - name: Set up JDK 11
      #   uses: actions/setup-java@v3
      #   with:
      #     java-version: '11'
      #     distribution: 'adopt'
      #     check-latest: true

      # - name: Set up Node.js
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: '22.6.0'

      # - name: Install Dependencies
      #   run: |
      #     npm install -g pnpm yarn
      #     pnpm install

      # - name: Create Folder Reports
      #   run: mkdir -p reports/dependency-check

      # - name: List Local Report Directory
      #   run: ls -la reports/dependency-check

      # - name: Run dependency check
      #   run: /usr/dependency-check/bin/dependency-check.sh --format ALL -s . --out reports/dependency-check --project "sls-monorepo-starter-frontend" --nvdApiKey 1d2777f6-a7c7-4204-bc27-60318d8a81d2 --disableBundleAudit --disableRetireJS --noupdate

  sast-sonarqube:
    name: SAST | SonarQube
    runs-on: [self-hosted, runner-sls-monorepo-starter-fe]
    needs: [sca-snyk, sca-dependency-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SonarQube Scanner
        run: |
          export PATH=$PATH:/usr/sonar-scanner/bin
          echo "/usr/sonar-scanner/bin" >> $GITHUB_PATH
          echo "SonarQube Scanner installed at: $(which sonar-scanner)"
          sonar-scanner --version

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
          check-latest: true

      - name: Run SonarQube Scanner Frontend
        run: |
          sonar-scanner \
            -Dsonar.projectKey=devsecops-demo-frontend \
            -Dsonar.projectName=devsecops-demo-frontend \
            -Dsonar.projectVersion=1.0 \
            -Dsonar.sources=apps/frontend \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.exclusions=./reports/dependency-check/**/* \
            -Dsonar.licensecheck.enabled=true \
            -Dsonar.dependencyCheck.jsonReportPath=./reports/dependency-check/dependency-check-report.json \
            -Dsonar.dependencyCheck.htmlReportPath=./reports/dependency-check/dependency-check-report.html \
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
            -Dsonar.pullrequest.branch=${{ github.head_ref }} \
            -Dsonar.pullrequest.base=${{ github.base_ref }} \
            -Dsonar.pullrequest.github.repository=${{ github.repository }} \
            -Dsonar.qualitygate.wait=true

      # Check the Quality Gate status.
      - name: SonarQube Quality Gate Check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # Show the output from the Quality Gate.
      # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
      - name: 'Here is SonarQube Quality Gate Status value..'
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

  sast-semgrep:
    name: SAST | Semgrep
    runs-on: ubuntu-latest
    needs: [sca-snyk, sca-dependency-check]
    steps:
      - name: SAST | Semgrep
        run: echo "TODO"

  secrets-scanning-gitleaks:
    name: Secret Scanning | GitLeaks
    runs-on: ubuntu-latest
    needs: [sast-semgrep, sast-sonarqube]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # - uses: gitleaks/gitleaks-action@v2
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

  iac-scanning-checkov:
    name: IaC Scanning | Checkov
    runs-on: ubuntu-latest
    needs: [sast-semgrep, sast-sonarqube]
    steps:
      - name: IaC Scanning | Checkov
        run: echo "TODO"

  container-scanning-trivy:
    name: IaC Scanning | Trivy Container Check
    runs-on: ubuntu-latest
    needs: [sast-semgrep, sast-sonarqube]
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.6.0'

      # - name: Install Dependencies
      #   run: |
      #     npm install -g pnpm yarn
      #     pnpm install

  qualitygate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [secrets-scanning-gitleaks, iac-scanning-checkov, container-scanning-trivy]
    steps:
      # # Check the Quality Gate status.
      # - name: SonarQube Quality Gate Check
      #   id: sonarqube-quality-gate-check
      #   uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # # Show the output from the Quality Gate.
      # # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
      # - name: 'Here is SonarQube Quality Gate Status value..'
      #   run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

      - name: License Compliance (FOSSA)
        run: echo "TODO"

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [qualitygate, container-scanning-trivy]
    steps:
      - name: Performance test | k6
        run: echo "TODO"

      - name: Performance test | JMeter
        run: echo "TODO"

  dast:
    name: Dast
    runs-on: ubuntu-latest
    needs: [qualitygate, performance-test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Pull OWASP ZAP Docker Image
        run: docker pull ghcr.io/zaproxy/zaproxy:stable

      - name: Run OWASP ZAP Security Scan
        run: |
          docker run --rm -v $(pwd):/zap/wrk:rw \
          ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
          -t https://strapi.dev.innomizetech.com \
          -r zap_report.html || true

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-security-report
          path: /zap/wrk/zap_report.html

  compliance-check:
    name: compliance-check
    runs-on: ubuntu-latest
    needs: [qualitygate, performance-test, dast]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # - name: Create Compliance Policy File
      #   run: |
      #     mkdir -p policies
      #     cat <<EOF > policies/compliance.rego
      #     package compliance

      #     default allow = false

      #     # Ki·ªÉm tra n·∫øu ·ª©ng d·ª•ng ƒë√°p ·ª©ng GDPR/PCI-DSS
      #     allow {
      #       input.user_data_encrypted
      #       input.https_enabled
      #       input.payment_data_stored == false
      #     }
      #     EOF

      # - name: Install OPA CLI
      #   run: |
      #     curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
      #     chmod +x opa
      #     sudo mv opa /usr/local/bin/

      # - name: Create Compliance Input Data
      #   run: |
      #     cat <<EOF > compliance_input.json
      #     {
      #       "user_data_encrypted": true,
      #       "https_enabled": true,
      #       "payment_data_stored": false
      #     }
      #     EOF

      # - name: Run OPA Compliance Check
      #   run: |
      #     result=$(opa eval --format=raw -i compliance_input.json -d policies/compliance.rego "data.compliance.allow")
      #     if [ "$result" != "true" ]; then
      #       echo "‚ùå Compliance check failed!"
      #       exit 1
      #     else
      #       echo "‚úÖ Compliance check passed!"
      #     fi
