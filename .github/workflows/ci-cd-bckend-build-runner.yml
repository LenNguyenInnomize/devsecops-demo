name: CI/CD Backend Workflow

on:
  workflow_dispatch: # Manual trigger
  push:
    branches:
      - main
    paths:
      - 'apps/backend/**'
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  scanning:
    runs-on: [self-hosted, runner-sls-monorepo-starter-be]
    steps:
      - name: Cache Dependency Check Data
        id: cache-dependency-check
        uses: actions/cache@v3
        with:
          path: ~/.dependency-check
          key: ${{ runner.os }}-dependency-check-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-dependency-check-

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SonarQube Scanner
        run: |
          export PATH=$PATH:/usr/sonar-scanner/bin
          echo "/usr/sonar-scanner/bin" >> $GITHUB_PATH
          echo "SonarQube Scanner installed at: $(which sonar-scanner)"
          sonar-scanner --version

      - name: Create Folder Reports
        run: mkdir -p reports/dependency-check

      - name: List Local Report Directory
        run: ls -la reports/dependency-check

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
          check-latest: true

      - name: Set JAVA_HOME
        run: echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV

      - name: Verify Java Installation
        run: java -version

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.6.0'

      - name: Install Dependencies
        run: |
          npm install -g pnpm yarn
          pnpm install

      - name: Run dependency check
        run: /usr/dependency-check/bin/dependency-check.sh --format ALL -s . --out reports/dependency-check --project "sls-monorepo-starter-frontend" --nvdApiKey 1d2777f6-a7c7-4204-bc27-60318d8a81d2 --disableBundleAudit --disableRetireJS --noupdate

      # - name: Upload Dependency Check Reports
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: dependency-check-reports
      #     path: reports/

      - name: Run SonarQube Scanner Backend
        run: |
          sonar-scanner \
            -Dsonar.projectKey=devsecops-demo-backend \
            -Dsonar.projectName=devsecops-demo-backend \
            -Dsonar.projectVersion=1.0 \
            -Dsonar.sources=apps/backend,package.json \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN_BACKEND }} \
            -Dsonar.exclusions=./reports/dependency-check/**/* \
            -Dsonar.licensecheck.enabled=true \
            -Dsonar.dependencyCheck.jsonReportPath=./reports/dependency-check/dependency-check-report.json \
            -Dsonar.dependencyCheck.htmlReportPath=./reports/dependency-check/dependency-check-report.html

  deploy:
    runs-on: [self-hosted, runner-sls-monorepo-starter-be]
    needs: scanning
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and Push Docker Image for Backend
        run: |
          docker build -f apps/backend/Dockerfile -t ${{ secrets.REGISTRY_IP }}/devsecops-be:latest .
          docker image prune -f
          echo ${{ secrets.REGISTRY_PASSWORD }} | docker login ${{ secrets.REGISTRY_IP }} -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin
          docker push ${{ secrets.REGISTRY_IP }}/devsecops-be:latest

      - name: SSH & Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_SERVER_IP }}
          username: ${{ secrets.AWS_SERVER_USER }}
          password: ${{ secrets.AWS_SERVER_PASSWORD }}
          command_timeout: 60m
          script: |
              cd ~/DOCKER_ZOZE/DEVOPS-DEMO/HOSTING/BE
              ./script.sh

  # notify:
  #   name: Notify Slack
  #   runs-on: ubuntu-latest
  #   needs: [scanning, deploy]
  #   if: always()
  #   steps:
  #     - name: Check workflow status
  #       id: workflow_status
  #       run: |
  #         if [ "${{ needs.scanning.result }}" == "success" ] && [ "${{ needs.deploy.result }}" == "success" ]; then
  #           echo "status=success" >> $GITHUB_ENV
  #         else
  #           echo "status=failure" >> $GITHUB_ENV
  #         fi

  #     - name: Notify Slack
  #       run: |
  #         STATUS=$(echo ${{ env.status }})
  #         if [ "$STATUS" == "success" ]; then
  #           ICON="üéâ"
  #           MESSAGE="CI/CD workflow for *SLS Frontend* has run completed!"
  #         else
  #           ICON="‚ùå"
  #           MESSAGE="CI/CD workflow for *SLS Frontend* has run failed!"
  #         fi
  #         curl -X POST -H 'Content-type: application/json' --data '{
  #           "text": "'"$MESSAGE"'",
  #           "blocks": [
  #             {
  #               "type": "section",
  #               "text": {
  #                 "type": "mrkdwn",
  #                 "text": "'"$ICON"' *'"$MESSAGE"'* \nView <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|*detail*>"
  #               }
  #             }
  #           ]
  #         }' ${{ secrets.SLACK_WEBHOOK_URL }}
