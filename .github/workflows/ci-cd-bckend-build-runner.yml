name: CI/CD Backend Workflow

on:
  workflow_dispatch: # Manual trigger
  push:
    branches:
      - main
    paths:
      - 'apps/backend/**'
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  scanning:
    runs-on: [self-hosted, sls-monorepo-starter-be]
    steps:
      - name: Cache Dependency Check Data
        id: cache-dependency-check
        uses: actions/cache@v3
        with:
          path: ~/.dependency-check
          key: ${{ runner.os }}-dependency-check-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-dependency-check-

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SonarQube Scanner
        run: |
          export PATH=$PATH:/usr/sonar-scanner/bin
          echo "/usr/sonar-scanner/bin" >> $GITHUB_PATH
          echo "SonarQube Scanner installed at: $(which sonar-scanner)"
          sonar-scanner --version

      - name: Create Folder Reports
        run: mkdir -p reports/dependency-check

      - name: List Local Report Directory
        run: ls -la reports/dependency-check

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
          check-latest: true

      - name: Set JAVA_HOME
        run: echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV

      - name: Verify Java Installation
        run: java -version

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.6.0'

      - name: Install Dependencies
        run: |
          npm install -g pnpm yarn
          pnpm install

      - name: Run dependency check
        run: /usr/dependency-check/bin/dependency-check.sh --format ALL -s . --out reports/dependency-check --project "INNOMIZE-DevKit_sls-monorepo-starter_18f12cc0-d5af-4b47-8600-186961a10133" --nvdApiKey 1d2777f6-a7c7-4204-bc27-60318d8a81d2 --disableBundleAudit --disableRetireJS --noupdate

      # - name: Upload Dependency Check Reports
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: dependency-check-reports
      #     path: reports/

      - name: Run SonarQube Scanner Backend
        run: |
          sonar-scanner \
            -Dsonar.projectKey=INNOMIZE-DevKit_sls-monorepo-starter_18f12cc0-d5af-4b47-8600-186961a10133 \
            -Dsonar.projectName=sls-monorepo-starter \
            -Dsonar.projectVersion=1.0 \
            -Dsonar.sources=apps/backend,libs,package.json \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.exclusions=./reports/dependency-check/**/* \
            -Dsonar.dependencyCheck.jsonReportPath=./reports/dependency-check/dependency-check-report.json \
            -Dsonar.dependencyCheck.htmlReportPath=./reports/dependency-check/dependency-check-report.html \
            -Dsonar.licensecheck.enabled=true

  build:
    runs-on: [self-hosted, sls-monorepo-starter-be]
    needs: scanning
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.6.0'

      - name: Install Dependencies
        run: |
          npm install -g pnpm yarn
          pnpm install

      - name: Check Lint
        run: pnpm run lint

      - name: Build project
        run: pnpm run build:backend

  deployment:
    runs-on: [self-hosted, sls-monorepo-starter-be]
    needs: build
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.6.0'

      - name: Create .env file with REGION variable
        run: |
          ls
          echo "REGION=${{ secrets.AWS_REGION }}" > apps/backend/.env
          ls
          pwd

      - name: Install Dependencies
        run: |
          npm install -g pnpm
          pnpm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_KEY }}
          aws-region: ap-southeast-1

      - name: Deploy Lambda Function
        run: pnpm run deploy:backend

  notify:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs: [scanning, build, deployment]
    if: always()
    steps:
      - name: Check workflow status
        id: workflow_status
        run: |
          if [ "${{ needs.scanning.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ] && [ "${{ needs.deployment.result }}" == "success" ]; then
            echo "status=success" >> $GITHUB_ENV
          else
            echo "status=failure" >> $GITHUB_ENV
          fi

      - name: Notify Slack
        run: |
          STATUS=$(echo ${{ env.status }})
          if [ "$STATUS" == "success" ]; then
            ICON="üéâ"
            MESSAGE="CI/CD workflow for *SLS Backend* has run completed!"
          else
            ICON="‚ùå"
            MESSAGE="CI/CD workflow for *SLS Backend* has run failed!"
          fi
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "'"$MESSAGE"'",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "'"$ICON"' *'"$MESSAGE"'* \nView <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|*detail*>"
                }
              }
            ]
          }' ${{ secrets.SLACK_WEBHOOK_URL }}
