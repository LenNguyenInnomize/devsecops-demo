name: CI/CD Storybook Workflow

on:
  workflow_dispatch: # Manual trigger
  push:
    branches:
      - main
    paths:
      - 'libs/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  sca-dependency-check:
    name: SCA | OWASP Dependency-Check
    runs-on: [self-hosted, runner-sls-monorepo-starter-fe]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.6.0'

  sast-sonarqube:
    name: SAST | SonarQube
    runs-on: [self-hosted, runner-sls-monorepo-starter-fe]
    needs: [sca-dependency-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

  sast-semgrep:
    name: SAST | Semgrep
    runs-on: [self-hosted, runner-sls-monorepo-starter-fe]
    needs: [sca-dependency-check]
    steps:
      - name: SAST | Semgrep
        run: echo "TODO"

  secrets-scanning-gitleaks:
    name: Secret Scanning | GitLeaks
    runs-on: [self-hosted, runner-sls-monorepo-starter-fe]
    needs: [sast-semgrep, sast-sonarqube]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # - uses: gitleaks/gitleaks-action@v2
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

  iac-scanning-checkov:
    name: IaC Scanning | Checkov
    runs-on: [self-hosted, runner-sls-monorepo-starter-fe]
    needs: [sast-semgrep, sast-sonarqube]
    steps:
      - name: IaC Scanning | Checkov
        run: echo "TODO"

  qualitygate:
    name: Quality Gate
    runs-on: [self-hosted, runner-sls-monorepo-starter-fe]
    needs: [secrets-scanning-gitleaks, iac-scanning-checkov]
    steps:
      - name: SonarQube Quality Gate
        run: echo "TODO"

      - name: License Compliance (FOSSA)
        run: echo "TODO"

  performance-test:
    name: Performance Test
    runs-on: [self-hosted, runner-sls-monorepo-starter-fe]
    needs: [qualitygate]
    steps:
      - name: Performance test | k6
        run: echo "TODO"

      - name: Performance test | JMeter
        run: echo "TODO"

  dast:
    name: Dast
    runs-on: [self-hosted, runner-sls-monorepo-starter-fe]
    needs: [qualitygate, performance-test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Pull OWASP ZAP Docker Image
        run: docker pull ghcr.io/zaproxy/zaproxy:stable

      - name: Run OWASP ZAP Security Scan
        run: |
          docker run --rm -v $(pwd):/zap/wrk:rw \
          ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
          -t https://strapi.dev.innomizetech.com \
          -r zap_report.html || true

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-security-report
          path: /zap/wrk/zap_report.html

  build-docker:
    name: Build Docker
    runs-on: [self-hosted, runner-sls-monorepo-starter-fe]
    needs: [performance-test, dast]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.6.0'

      - name: Install Dependencies
        run: |
          npm install -g pnpm
          pnpm install

      - name: Build Storybook
        run: pnpm run storybook:frontend

      - name: Build and Push Docker Image for Storybook
        run: |
          docker build -f Dockerfile.storybook -t ${{ secrets.REGISTRY_IP }}/sls-storybook:latest .
          docker image prune -f
          echo ${{ secrets.REGISTRY_PASSWORD }} | docker login ${{ secrets.REGISTRY_IP }} -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin
          docker push ${{ secrets.REGISTRY_IP }}/sls-storybook:latest

  deploy:
    name: Deploy to VMs
    runs-on: [self-hosted, runner-sls-monorepo-starter-fe]
    needs: [performance-test, dast, build-docker]
    steps:
      - name: SSH & Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_SERVER_IP }}
          username: ${{ secrets.AWS_SERVER_USER }}
          password: ${{ secrets.AWS_SERVER_PASSWORD }}
          command_timeout: 60m
          script: |
            cd ~/DOCKER_ZOZE/SLS-FE/SLS-STORYBOOK
            ./script.sh

  notify:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs:
      [
        sca-dependency-check,
        sast-sonarqube,
        sast-semgrep,
        secrets-scanning-gitleaks,
        iac-scanning-checkov,
        qualitygate,
        performance-test,
        dast,
        build-docker,
        deploy,
      ]
    if: always()
    steps:
      - name: Check workflow status
        id: workflow_status
        run: |
          if [ "${{ needs.build.result }}" == "success" ] && [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "status=success" >> $GITHUB_ENV
          else
            echo "status=failure" >> $GITHUB_ENV
          fi

      - name: Notify Slack
        run: |
          STATUS=$(echo ${{ env.status }})
          if [ "$STATUS" == "success" ]; then
            ICON="üéâ"
            MESSAGE="CI/CD workflow for *SLS Storybook* has run completed!"
          else
            ICON="‚ùå"
            MESSAGE="CI/CD workflow for *SLS Storybook* has run failed!"
          fi
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "'"$MESSAGE"'",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "'"$ICON"' *'"$MESSAGE"'* \nView <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|*detail*>"
                }
              }
            ]
          }' ${{ secrets.SLACK_WEBHOOK_URL }}

  # - name: Install sshpass
  #   run: sudo apt-get install -y sshpass

  # - name: SSH and Deploy to Dev (FOR LOCAL PC ONLY)
  #   run: |
  #     sshpass -p "${{ secrets.WINDOWS_SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no -p 22 ${{ secrets.WINDOWS_SERVER_USER }}@${{ secrets.WINDOWS_SERVER_IP }} << 'EOF'
  #       cd "${{ vars.HOSTING_ADDRESS }}"
  #       powershell -ExecutionPolicy Bypass -File "${{ vars.HOSTING_ADDRESS }}\deploy.ps1"
  #     EOF
